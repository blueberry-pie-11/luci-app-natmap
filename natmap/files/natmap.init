#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

NAME=natmap
PROG=/usr/bin/$NAME

STATUS_PATH=/var/run/natmap

load_interfaces() {
	config_get interface "$1" interface
	config_get natmap_enable "$1" natmap_enable 1

	[ "${natmap_enable}" = "1" ] && interfaces=" ${interface} ${interfaces}"
}

validate_section_natmap() {
	uci_load_validate "${NAME}" natmap "$1" "$2" \
		'natmap_enable:bool:0' \
		'ip_address_family:string' \
		'link_mode:string:general' \
		'nat_protocol:bool:0' \
		'wan_interface:string' \
		'nat_name:string' \
		'interval:uinteger' \
		'stun_server:host' \
		'http_server:host' \
		'bind_port:port' \
		'notify_script:file' \
		'forward_enable:bool:0' \
		'forward_target_ip:host' \
		'forward_target_port:port' \
		'forward_mode:string' \
		'forward_natmap_target_interface:string' \
		'forward_natmap_use_natmap:bool:0' \
		'forward_ikuai_web_url:string' \
		'forward_ikuai_username:string' \
		'forward_ikuai_password:string' \
		'forward_ikuai_mapping_protocol:string' \
		'forward_ikuai_mapping_wan_interface:string' \
		'notify_enable:bool:0' \
		'notify_channel:string' \
		'notify_channel_telegram_bot_chat_id:string' \
		'notify_channel_telegram_bot_token:string' \
		'notify_channel_pushplus_token:string' \
		'link_emby_url:string' \
		'link_emby_api_key:string' \
		'link_emby_use_https:bool:0' \
		'link_emby_update_host_with_ip:bool:0' \
		'link_qb_web_url:string' \
		'link_qb_username:string' \
		'link_qb_password:string' \
		'link_qb_ipv6_address:string' \
		'link_qb_allow_ipv6:bool:0' \
		'link_tr_rpc_url:string' \
		'link_tr_username:string' \
		'link_tr_password:string' \
		'link_tr_allow_ipv6:bool:0' \
		'link_tr_ipv6_address:string' \
		'link_cloudflare_email:string' \
		'link_cloudflare_api_key:string' \
		'link_cloudflare_zone_id:string' \
		'link_cloudflare_rule_target_url:string' \
		'link_cloudflare_rule_name:string' \
		'notify_channel_telegram_bot_proxy:string'
}

natmap_instance() {
	[ "$2" = 0 ] || {
		echo "validation failed"
		return 1
	}

	[ "${natmap_enable}" = 0 ] && return 1

	procd_open_instance "$1"
	procd_set_param command "$PROG" \
		${interval:+-k "$interval"} \
		${stun_server:+-s "$stun_server"} \
		${http_server:+-h "$http_server"} \
		${bind_port:+-b "$bind_port"}

	[ "${ip_address_family}" = ipv4 ] && procd_append_param command -4
	[ "${ip_address_family}" = ipv6 ] && procd_append_param command -6
	[ "${nat_protocol}" = 1 ] && procd_append_param command -u

	[ -n "${wan_interface}" ] && {
		local ifname

		network_get_device ifname "$wan_interface" || ifname="$wan_interface"
		procd_append_param command -i "$ifname"
		procd_append_param netdev "$ifname"
	}

	[ -n "${forward_natmap_target_interface}" ] && {
		local ifname

		network_get_device ifname "$forward_natmap_target_interface" || ifname="$forward_natmap_target_interface"
		procd_append_param command -i "$ifname"
		procd_append_param netdev "$ifname"
	}

	[ "${forward_enable}" = 1 ] && [ "${forward_mode}" = local ] && [ -n "${forward_target_ip}" ] && [ "${forward_natmap_use_natmap}" = 1 ] && procd_append_param command -t "$forward_target_ip" -p "$forward_target_port"
	for e in $EXTRA_ENV; do
		eval value=\$${e}
		option_name=$(echo "$e" | tr 'a-z' 'A-Z')
		if [ -n "$value" ]; then
			procd_append_param env $option_name="$value"
		fi
	done

	procd_append_param command -e /usr/lib/natmap/update.sh

	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1

	procd_close_instance
}

clear_status_files() {
	find "${STATUS_PATH}" -type f -print0 | xargs -0 rm -f --
}

service_triggers() {
	local interfaces

	procd_add_reload_trigger "${NAME}"

	config_load "${NAME}"
	config_foreach load_interfaces natmap

	[ -n "${interfaces}" ] && {
		for n in $interfaces; do
			procd_add_reload_interface_trigger $n
		done
	}

	procd_add_validation validate_section_natmap
}

start_service() {
	. /lib/functions/network.sh
	config_cb() {
		[ $# -eq 0 ] && return

		option_cb() {
			local option="$1"

			EXTRA_ENV="$EXTRA_ENV $option"
		}

		list_cb() {
			local name="$1"
			EXTRA_ENV="$EXTRA_ENV $name"
		}
	}
	mkdir -p "${STATUS_PATH}"
	clear_status_files

	config_load "${NAME}"
	config_foreach validate_section_natmap natmap natmap_instance
}

reload_service() {
	stop
	start
}

service_stopped() {
	clear_status_files
}
